{"version":3,"sources":["utils/getKit.ts","models/Account.ts","components/Crypto.tsx","components/Address.tsx","utils/lockedCelo.ts","utils/vote.ts","utils/delegateVoting.ts","store/actions.ts","store/reducers.ts","store/store.ts","store/index.ts","components/LockCeloModal.tsx","components/VoteModal.tsx","components/DelegateModal.tsx","components/AccountsTable.tsx","Dashboard.tsx","Nic.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["_kit","lockedGoldContract","accountsContract","LockedCelo","item","total","requirement","nonvoting","this","BigNumber","Account","address","name","celo","lockedCelo","pendingWithdrawals","publicKey","isSigner","isAccount","authorizedSigners","metadataURL","wallet","dataEncryptionKey","hasPendingVotes","derivationPathIndex","derivationPath","Crypto","value","props","strValue","web3","utils","fromWei","toString","e","React","Component","Address","className","href","target","rel","live","newLedgerWallet","transport","derivationPathIndexes","baseDerivationPath","ledgerAddressValidation","a","LedgerWallet","init","getKit","nodeAddr","TransportU2F","create","newKit","getKitWithDerivationPath","undefined","AddressValidation","never","setDefaultAccount","account","console","log","defaultAccount","getCGld","kit","contracts","getGoldToken","getLockedGoldContract","getLockedGold","getAccountsContract","getAccounts","ledgerAddresses","eth","Eth","users","i","getAddress","celoDerivationPath","data","accountSummary","summary","push","updateAccounts","Error","accounts","values","updateAccount","cgld","balanceOf","balance","lockedGold","lg","is","pendingVotes","JSON","stringify","acc","getAccountSummary","getElection","election","voteSignerToAccount","checkAccount","ia","result","error","registerAccount","createAccount","tx","args","from","send","getHash","hash","lockCelo","ua","getPendingWithdrawalsTotalValue","pendingWithdrawalsValue","relockValue","minimum","lockValue","minus","lt","relock","txos","txo","displaySendTx","gt","lock","toFixed","txObj","txResult","txHash","waitReceipt","txReceipt","getValidators","vote","validatorGroupAddress","validators","isValidatorGroup","sendAndWaitForReceipt","activateVote","activate","delegateVoting","beneficiary","contract","signature","signer","sig","parseSignatureOfAddress","releaseGoldWrapper","getreleaseGoldWrapper","authorizeVoteSigner","ReleaseGoldWrapper","newReleaseGold","ActionTypes","dispatch","clearError","loadingStarted","setAccounts","message","looadingFinsihed","updateBalances","getState","state","updated","u","type","initialState","errorMessage","loading","persistConfig","key","blacklist","storage","persistedReducer","persistReducer","action","store","createStore","applyMiddleware","thunk","persistor","persistStore","mapDispatchToProps","setLedgerAddresses","amount","mapStateToProps","LockCeloModal","lockAmount","updateCeloAmount","event","setState","alert","open","handelClose","Modal","onClose","TextField","onChange","size","id","label","variant","InputProps","startAdornment","InputAdornment","position","Button","color","onClick","connect","VoteModal","voteAmount","updateVoteAmount","DelegateModal","delegate","AccountsTable","openModal","openVoteModal","openDelegateModal","modalAccount","modalVoteAccount","modalDelegateAccount","closeModal","getRows","map","x","index","TableRow","TableCell","align","disabled","lte","activateVotes","rows","TableContainer","component","Paper","Table","aria-label","TableHead","TableBody","Dashboard","getLedgerCeloAddress","updateState","Card","CardContent","Nic","Typography","gutterBottom","CardActions","Alert","severity","AlertTitle","Container","maxWidth","App","loadingIcon","CircularProgress","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Box","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e4fb8179.chunk.js","sourcesContent":["import {ContractKit, newKit} from \"@celo/contractkit\";\nimport {GoldTokenWrapper} from \"@celo/contractkit/lib/wrappers/GoldTokenWrapper\";\nimport TransportU2F from \"@ledgerhq/hw-transport-u2f\";\n// @ts-ignore\nimport Eth from \"@ledgerhq/hw-app-eth\";\nimport {Account} from \"../models\";\nimport {LockedGoldWrapper} from \"@celo/contractkit/lib/wrappers/LockedGold\";\nimport {AccountsWrapper} from \"@celo/contractkit/lib/wrappers/Accounts\";\nimport BigNumber from \"bignumber.js\";\nimport {AddressValidation, LedgerWallet} from \"@celo/contractkit/lib/wallets/ledger-wallet\";\nimport {LockedCelo} from \"../models/Account\";\n// @ts-ignore\nimport { Tx } from 'web3-core';\n\nlet _kit: ContractKit;\n//const live = \"https://celo-full-node-mainnet.trustworks.io:48545\";\n//const live = \"https://local.trustworks.io:48545\";\n//const live = \"https://alfajores-forno.celo-testnet.org\";\nconst live = \"https://rc1-forno.celo-testnet.org\";\n\nconst celoDerivationPath: string = \"m/44'/52752'/0'/0\";\n\nlet lockedGoldContract: LockedGoldWrapper;\nlet accountsContract: AccountsWrapper;\n\nconst newLedgerWallet = async (\n    transport: any,\n    derivationPathIndexes?: number[],\n    baseDerivationPath?: string,\n    ledgerAddressValidation?: AddressValidation\n): Promise<LedgerWallet> => {\n    const wallet = new LedgerWallet(\n        derivationPathIndexes,\n        baseDerivationPath,\n        transport,\n        ledgerAddressValidation\n    );\n    await wallet.init();\n    return wallet;\n};\n\nexport const getKit = async (): Promise<ContractKit> => {\n    if (!_kit) {\n        const nodeAddr = live;\n        const transport = await TransportU2F.create();\n        const wallet = await newLedgerWallet(transport);\n        _kit =  newKit(nodeAddr, wallet);\n    }\n    return _kit;\n};\n\nexport const getKitWithDerivationPath = async (derivationPathIndex?: number): Promise<ContractKit> => {\n    let derivationPathIndexes = derivationPathIndex ? [derivationPathIndex] : undefined;\n\n    const nodeAddr = live;\n    const transport = await TransportU2F.create();\n    const wallet = await newLedgerWallet(transport, derivationPathIndexes , celoDerivationPath, AddressValidation.never);\n    _kit = newKit(nodeAddr, wallet);\n    return _kit;\n};\n\nexport const setDefaultAccount = async (account: Account) => {\n    console.log(\"Setting default address: \", account.derivationPathIndex, account.address);\n    const kit = await getKitWithDerivationPath(account.derivationPathIndex);\n    kit.defaultAccount = account.address;\n};\n\nexport const getCGld = async (): Promise<GoldTokenWrapper> => {\n    const kit = await getKit();\n    return await kit.contracts.getGoldToken();\n};\n\nexport const getLockedGoldContract = async (): Promise<LockedGoldWrapper> => {\n    if (lockedGoldContract) {\n        return lockedGoldContract;\n    }\n    const kit = await getKit();\n    lockedGoldContract =  await kit.contracts.getLockedGold();\n    return lockedGoldContract;\n};\n\nexport const getAccountsContract = async (): Promise<AccountsWrapper> => {\n    if (accountsContract) {\n        return accountsContract;\n    }\n    const kit = await getKit();\n    accountsContract =  await kit.contracts.getAccounts();\n    return accountsContract;\n};\n\nexport const getAccounts = async (ledgerAddresses: number = 1) => {\n    try {\n        const transport = await TransportU2F.create();\n        const eth = new Eth(transport);\n        let users = [];\n        for (let i = 0; i < ledgerAddresses; i++) {\n            const data = await eth.getAddress(celoDerivationPath + \"/\" + i );\n            const summary = await accountSummary(data.address);\n\n            users.push(new Account({\n                derivationPath: i,\n                ...summary,\n                ...data,\n            }));\n        }\n        return await updateAccounts(users);\n    } catch (e) {\n        console.log(e);\n        throw Error(\"There was an error getting data.  Please make sure your Ledger is unlocked \" + e);\n    }\n};\n\nexport const updateAccounts = async (accounts: Account[] = []): Promise<Account[]> => {\n    const values = [];\n    for (let account of accounts) {\n        account = await updateAccount(account);\n        values.push(account);\n    }\n    return values;\n};\n\nexport const updateAccount = async (account: Account): Promise<Account> => {\n    if (!account || !account.address)\n    {\n        throw new Error(\"account is required\");\n    }\n\n    const cgld = await getCGld();\n    const balance = await cgld.balanceOf(account.address);\n    const lg = await lockedGold(account.address);\n    const is = await isSigner(account.address);\n    const pendingVotes = await hasPendingVotes(account);\n\n    console.log(JSON.stringify(lg, null, 4))\n    const acc = new Account({\n        ...account,\n        celo: balance,\n        pendingWithdrawals: lg.accountSummary.pendingWithdrawals,\n        isSigner: is,\n        isAccount: lg.isAccount,\n        hasPendingVotes: pendingVotes\n    });\n\n    acc.lockedCelo = new LockedCelo(lg.accountSummary.lockedGold);\n    return acc;\n};\n\nexport const isAccount = async (address: string): Promise<boolean> => {\n    const accounts = await getAccountsContract();\n    return await accounts.isAccount(address);\n};\n\nexport const isSigner = async (address: string): Promise<boolean> => {\n    const accounts = await getAccountsContract();\n    return await accounts.isSigner(address);\n};\n\nconst accountSummary = async (address: string): Promise<any> => {\n    const accounts = await getAccountsContract();\n    return await accounts.getAccountSummary(address);\n};\n\nconst getElection = async () => {\n    const kit = await getKit();\n    return await kit.contracts.getElection();\n};\n\nexport const hasPendingVotes = async (account: Account): Promise<any> => {\n    const kit = await getKit();\n    const election = await getElection();\n    const accounts = await kit.contracts.getAccounts();\n    const checkAccount = await accounts.voteSignerToAccount(account.address);\n    return await election.hasPendingVotes(checkAccount);\n};\n\nexport const lockedGold = async (address: string) => {\n    try {\n        const ia = await isAccount(address);\n        if (!ia) {\n            return {\n                accountSummary: {\n                    lockedGold: new LockedCelo(),\n                    pendingWithdrawals: new BigNumber(0),\n                },\n                isAccount: false,\n            };\n        }\n        const lg = await getLockedGoldContract();\n        const result = await lg.getAccountSummary(address);\n        return {\n            accountSummary: result,\n            isAccount: ia,\n        };\n    } catch (e) {\n        console.error(e);\n        throw e;\n    }\n};\n\nexport const registerAccount = async (account: Account): Promise<any> => {\n    try {\n        console.log(account);\n        await setDefaultAccount(account);\n        const ia = await isAccount(account.address);\n        if (ia) {\n            throw new Error(\"Account is already registered\");\n        }\n\n        const accounts = await getAccountsContract();\n        const tx = await accounts.createAccount();\n        const args: Omit<Tx, 'data'> = { from: account.address };\n        const result = await tx.send(args);\n        const hash = await result.getHash();\n\n        return {\n            result,\n            hash,\n        }\n    } catch (e) {\n        console.log(\"I threw the error\");\n        throw e;\n    }\n};\n\n/*\nconst isValidatorGroup = async (address: string): Promise<boolean> => {\n    const kit = await getKit();\n    const validators = await kit.contracts.getValidators();\n    return await validators.isValidatorGroup(address);\n};\n*/\n\n/*const hasEnoughNonvotingLockedGold = async (address: string): Promise<boolean> => {\n    const lg = await getLockedGoldContract();\n    //const result = await lg.\n    return false;\n};*/\n/*\n\nexport const castVote = async (vote: Vote) => {\n    if (!vote.from.isAccount && !vote.from.isSigner) {\n        throw Error(\"User must be an account or signer\");\n    }\n\n    const validatorGroup = await isValidatorGroup(vote.for);\n    if (!validatorGroup) {\n        throw Error(\"Address is not a validator group\");\n    }\n\n    // TODO: has enough non voting locked gold\n\n\n\n    const kit = await getKit();\n    const election = await kit.contracts.getElection();\n    const tx = await election.vote(vote.for, vote.value);\n    console.log(tx);\n};\n*/\n","import BigNumber from \"bignumber.js\";\n\nclass AuthorizedSigner {\n    vote: string;\n    validator: string;\n    attestation: string;\n\n    constructor(item: any = {}) {\n        this.vote = item.vote;\n        this.validator = item.validator;\n        this.attestation = item.attestation;\n    }\n}\n\nexport class LockedCelo {\n    total: BigNumber;\n    requirement: BigNumber;\n    nonvoting: BigNumber;\n\n    constructor(item: any = {}) {\n        this.total = item.total ? new BigNumber(item.total) : new BigNumber(0);\n        this.requirement = item.requirement ? new BigNumber(item.requirement) : new BigNumber(0);\n        this.nonvoting = item.nonvoting ? new BigNumber(item.nonvoting) : new BigNumber(0);\n    }\n}\n\nexport class Account {\n    address: string;\n    name: string;\n    celo: BigNumber;\n    lockedCelo: LockedCelo;\n    pendingWithdrawals: BigNumber;\n    publicKey: string;\n    isSigner: boolean;\n    isAccount: boolean;\n    authorizedSigners: AuthorizedSigner[];\n    metadataURL: string;\n    wallet: string;\n    dataEncryptionKey: any;\n    hasPendingVotes: boolean;\n    derivationPathIndex: number;\n\n    constructor(item: any = {}) {\n        this.metadataURL = item.metadataURL;\n        this.wallet = item.wallet;\n        this.dataEncryptionKey = item.dataEncryptionKey;\n        this.name = item.name;\n        this.authorizedSigners = item.authorizedSigners || [];\n        this.address = item.address;\n        this.celo = item.celo || new BigNumber(0);\n        this.lockedCelo = new LockedCelo(item.lockedCelo) || new LockedCelo();\n        this.publicKey = item.publicKey;\n        this.pendingWithdrawals = item.pendingWithdrawals;\n        this.isAccount = item.isAccount;\n        this.isSigner = item.isSigner;\n        this.hasPendingVotes = item.hasPendingVotes;\n        this.derivationPathIndex = item.derivationPath;\n    }\n}\n","import React from \"react\";\nimport BigNumber from \"bignumber.js\";\nimport web3 from 'web3';\n\ninterface CryptoProps {\n    value: BigNumber\n}\n\nclass Crypto extends React.Component<CryptoProps, any> {\n\n    render() {\n        let {value} = this.props;\n        value = value || new BigNumber(0);\n\n        let strValue = \"????\";\n        try {\n            strValue = web3.utils.fromWei(value.toString());\n        } catch (e) {\n            strValue = value.toString();\n        }\n        return (\n            <span>{ strValue }</span>\n        )\n    }\n}\n\nexport default Crypto;\n","import React from \"react\";\n\ninterface AddressProps {\n    address: string;\n}\n\nclass Address extends React.Component<AddressProps> {\n    render() {\n        const {address} = this.props;\n        return (\n            <a\n                className=\"address-link\"\n                href={ `https://explorer.celo.org/address/${address}/celo` }\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >{ address }</a>\n        )\n    }\n}\n\nexport default Address;\n","import {Account} from \"../models\";\nimport BigNumber from \"bignumber.js\";\nimport {getLockedGoldContract, isAccount, setDefaultAccount, updateAccount} from \"./getKit\";\nimport {CeloTransactionObject} from \"@celo/contractkit\";\n// @ts-ignore\nimport { Tx } from 'web3-core';\n\nexport const lockCelo = async (account: Account, value: BigNumber) => {\n\n    await setDefaultAccount(account);\n    const ua = await updateAccount(account);\n    const address = account.address;\n\n    const ia = await isAccount(address);\n    if (!ia) {\n        throw new Error(\"Account is not a registered Account\");\n    }\n\n    const lockedGold = await getLockedGoldContract();\n    const pendingWithdrawalsValue = await lockedGold.getPendingWithdrawalsTotalValue(address);\n    const relockValue = BigNumber.minimum(pendingWithdrawalsValue, value);\n    const lockValue = value.minus(relockValue);\n\n    if (ua.celo.lt(lockValue)) {\n        throw new Error(\"Account balance seems too low\");\n    }\n    const txos = await lockedGold.relock(address, relockValue);\n    for (const txo of txos) {\n        console.log('relock', txo, { from: address });\n        await displaySendTx('relock', txo, { from: address })\n    }\n    if (lockValue.gt(new BigNumber(0))) {\n        const tx = lockedGold.lock();\n        await displaySendTx('lock', tx, { value: lockValue.toFixed() })\n    }\n};\n\nexport async function displaySendTx<A>(name: string, txObj: CeloTransactionObject<A>, tx?: Omit<Tx, 'data'>) {\n    const txResult = await txObj.send(tx);\n    const txHash = await txResult.getHash();\n    const txReceipt = await txResult.waitReceipt();\n\n    return {\n        txHash,\n        txReceipt,\n    }\n}\n","import {getKit, hasPendingVotes, isAccount, setDefaultAccount} from \"./getKit\";\nimport {Account} from '../models'\nimport BigNumber from \"bignumber.js\";\n// @ts-ignore\nimport { Tx } from 'web3-core';\n\nconst getElection = async () => {\n    const kit = await getKit();\n    return await kit.contracts.getElection();\n};\n\nconst getValidators = async () => {\n    const kit = await getKit();\n    return await kit.contracts.getValidators();\n};\n\nexport const vote = async (account: Account, validatorGroupAddress: string, value: BigNumber): Promise<any> => {\n    await setDefaultAccount(account);\n    const election = await getElection();\n\n\n    try {\n        const ia = await isAccount(account.address);\n        if (!ia) throw new Error(\"Account is not a valid/registered account\");\n\n        const validators = await getValidators();\n        const isValidator = await validators.isValidatorGroup(validatorGroupAddress);\n        if (!isValidator) {\n            throw new Error(\"Address is not a validator\");\n        }\n\n        // TODO: check has enough non voting locked gold\n        if (account.lockedCelo.nonvoting.lt(value)) {\n            throw new Error(\"There is not enough non-voting locked Celo to complete the transaction\");\n        }\n\n        const tx = await election.vote(validatorGroupAddress, value);\n        const result = await tx.sendAndWaitForReceipt();\n        return result;\n    } catch (e) {\n        console.log(e);\n        throw e;\n    }\n};\n\nexport const activateVote = async (account: Account): Promise<any> => {\n    try {\n        await setDefaultAccount(account);\n        const election = await getElection();\n        const pendingVotes = await hasPendingVotes(account);\n        if (pendingVotes) {\n            const txos = await election.activate(account.address);\n            const args: Omit<Tx, 'data'> = { from: account.address };\n            for (const txo of txos) {\n                const result = await txo.sendAndWaitForReceipt(args);\n                console.log(JSON.stringify(result));\n            }\n        } else {\n            throw new Error(\"No Pending Votes\");\n        }\n    } catch (e) {\n        console.log(e);\n        throw e;\n    }\n};\n","import {getKit, isAccount, setDefaultAccount} from \"./getKit\";\nimport {Account, DelegateVote} from \"../models\";\nimport {ReleaseGoldWrapper} from \"@celo/contractkit/lib/wrappers/ReleaseGold\";\nimport {newReleaseGold} from \"@celo/contractkit/lib/generated/ReleaseGold\";\n\nexport const delegateVotingold = async (from: Account, signer: Account, signature: string) => {\n    await setDefaultAccount(from);\n    const kit = await getKit();\n\n    const accounts = await kit.contracts.getAccounts();\n    const sig = accounts.parseSignatureOfAddress(\n        from.address,\n        signer.address,\n        signature\n    );\n    const ia = await isAccount(from.address);\n    if (!ia) {\n        throw new Error(\"From account is not a registered account\");\n    }\n    let tx: any;\n    tx = await accounts.authorizeVoteSigner(signer.address, sig);\n\n    const txResult = await tx.send();\n    const txHash = await txResult.getHash();\n    const txReceipt = await txResult.waitReceipt();\n\n    return {\n        txHash,\n        txReceipt,\n    }\n};\n\nexport const delegateVoting = async (item: DelegateVote) => {\n\n    console.log(JSON.stringify(item, null, 4));\n    if (!item.beneficiary) {\n        throw new Error(\"item.beneficiary is required\");\n    }\n\n    if (!item.contract) {\n        throw new Error(\"item.contract is required\");\n    }\n\n    if (!item.signature) {\n        throw new Error(\"item.signature is required\");\n    }\n\n    if (!item.signer) {\n        throw new Error(\"item.signer is required\");\n    }\n\n    const signature  = item.signature;\n    const signer = item.signer;\n    const contract = item.contract;\n\n    await setDefaultAccount(new Account({ address: item.beneficiary }));\n    const kit = await getKit();\n    const accounts = await kit.contracts.getAccounts();\n    const sig = accounts.parseSignatureOfAddress(\n        contract,\n        signer,\n        signature\n    );\n\n    const releaseGoldWrapper = getreleaseGoldWrapper(contract, kit);\n    let tx: any;\n    tx = await releaseGoldWrapper.authorizeVoteSigner(signer, sig);\n\n    const txResult = await tx.send();\n    const txHash = await txResult.getHash();\n    const txReceipt = await txResult.waitReceipt();\n\n    return {\n        txHash,\n        txReceipt,\n    }\n};\n\nconst getreleaseGoldWrapper = (address: string, kit: any): ReleaseGoldWrapper => {\n    return new ReleaseGoldWrapper(\n        kit,\n        newReleaseGold(kit.web3, address)\n    );\n}\n","import * as utils from \"../utils\";\nimport {Account, DelegateVote} from \"../models\";\nimport BigNumber from \"bignumber.js\";\n\nconst ActionTypes = {\n    GET_ACCOUNTS: \"GET_ACCOUNTS\",\n    LOADING: \"LOADING\",\n    FINISHED_LOADING: \"FINISHED_LOADING\",\n    CLEAR_ERROR: \"CLEAR_ERROR\",\n    ERROR: \"ERROR\",\n    SET_ACCOUNTS: \"SET_ACCOUNTS\",\n    SET_LEDGER_ADDRESSES: \"SET_LEDGER_ADDRESSES\",\n    UPDATE_BALANCES: \"UPDATE_BALANCES\"\n};\n\nconst getAccounts = (ledgerAddresses: number) => {\n    return async (dispatch: any) => {\n        try {\n            dispatch(clearError());\n            dispatch(loadingStarted());\n            const accounts = await utils.getAccounts(ledgerAddresses);\n            dispatch(setAccounts(accounts));\n        } catch (e) {\n            console.error(e);\n            dispatch(error(e.message));\n        } finally {\n            dispatch(looadingFinsihed());\n        }\n    };\n};\n\nconst updateBalances = () => {\n    return async (dispatch: any, getState: any) => {\n        const state = getState();\n        let accounts = state.accounts || [];\n\n        try {\n            dispatch(clearError());\n            dispatch(loadingStarted());\n            const updated = [];\n            for (let account of accounts) {\n                const u = await utils.updateAccount(account);\n                updated.push(u);\n            }\n\n            dispatch(setAccounts(updated));\n        } catch (e) {\n            console.error(e);\n            dispatch(error(e.message));\n        } finally {\n            dispatch(looadingFinsihed());\n        }\n    };\n};\n\nconst vote = (account: Account, value: BigNumber) => {\n    return async (dispatch: any) => {\n        try {\n            dispatch(clearError());\n            dispatch(loadingStarted());\n            await utils.vote(account, \"0xf84D2Aaf9261E9124eBECE8b43b57BeF3FB78d12\",  value);\n            dispatch(updateBalances());\n        } catch (e) {\n            console.error(e);\n            dispatch(error(e.message));\n        } finally {\n            dispatch(looadingFinsihed());\n        }\n    };\n};\n\nconst delegateVoting = (item: DelegateVote) => {\n    return async (dispatch: any) => {\n        try {\n            dispatch(clearError());\n            dispatch(loadingStarted());\n            await utils.delegateVoting(item);\n            dispatch(updateBalances());\n        } catch (e) {\n            console.error(e);\n            dispatch(error(e.message));\n        } finally {\n            dispatch(looadingFinsihed());\n        }\n    };\n};\n\nconst activateVote = (account: Account) => {\n    return async (dispatch: any) => {\n        try {\n            dispatch(clearError());\n            dispatch(loadingStarted());\n            await utils.activateVote(account);\n            dispatch(updateBalances());\n        } catch (e) {\n            console.error(e);\n            dispatch(error(e.message));\n        } finally {\n            dispatch(looadingFinsihed());\n        }\n    };\n};\n\nconst lockCelo = (account: Account, amount: BigNumber) => {\n    return async (dispatch: any) => {\n        try {\n            dispatch(clearError());\n            dispatch(loadingStarted());\n            await utils.lockCelo(account, amount);\n            dispatch(updateBalances());\n        } catch (e) {\n            console.error(e);\n            dispatch(error(e.message));\n        } finally {\n            dispatch(looadingFinsihed());\n        }\n    };\n};\n\nconst registerAccount = (account: Account) => {\n    return async (dispatch: any) => {\n        try {\n            console.log(\"I'm in Register Account\")\n            dispatch(clearError());\n            dispatch(loadingStarted());\n            const result = await utils.registerAccount(account);\n            console.log(\"RESULT\", result);\n            dispatch(updateBalances());\n        } catch (e) {\n            console.error(e);\n            dispatch(error(e.message));\n        } finally {\n            dispatch(looadingFinsihed());\n        }\n    };\n};\n\nconst setAccounts = (accounts: Account[] = []) => {\n    return {\n        type: ActionTypes.SET_ACCOUNTS,\n        accounts: accounts\n    }\n};\n\nconst error = (error: any) => {\n    return {\n        type: ActionTypes.ERROR,\n        error\n    }\n};\n\nconst clearError = () => {\n    return {\n        type: ActionTypes.CLEAR_ERROR\n    }\n};\n\nconst loadingStarted = () => {\n    return {\n        type: ActionTypes.LOADING,\n    };\n};\n\nconst looadingFinsihed = () => {\n    return {\n        type: ActionTypes.FINISHED_LOADING,\n    }\n};\n\nconst setLedgerAddresses = (ledgerAddresses: number) => {\n    return {\n        type: ActionTypes.SET_LEDGER_ADDRESSES,\n        ledgerAddresses\n    }\n};\n\nexport {\n    ActionTypes,\n    getAccounts,\n    setLedgerAddresses,\n    updateBalances,\n    lockCelo,\n    registerAccount,\n    vote,\n    activateVote,\n    delegateVoting,\n}\n","import {ActionTypes} from \"./actions\";\n\nconst initialState = {\n    accounts: [],\n    error: false,\n    errorMessage: undefined,\n    loading: false,\n    ledgerAddresses: 1\n};\n\nconst reducer = (state: any, action: any) => {\n    console.log(action.type);\n    switch(action.type) {\n        case ActionTypes.SET_ACCOUNTS:\n            return {\n                ...state,\n                accounts: action.accounts\n            };\n        case ActionTypes.UPDATE_BALANCES:\n            return {\n                ...state,\n                account: action.accounts\n            };\n        case ActionTypes.CLEAR_ERROR:\n            return {\n                ...state,\n                error: false,\n                errorMessage: undefined,\n            };\n        case ActionTypes.ERROR:\n            return {\n                ...state,\n                error: true,\n                errorMessage: action.error || \"There was an error\",\n            };\n        case ActionTypes.LOADING:\n            return {\n                ...state,\n                loading: true,\n            };\n        case ActionTypes.FINISHED_LOADING:\n            return {\n                ...state,\n                loading: false,\n            };\n        case ActionTypes.SET_LEDGER_ADDRESSES:\n            return {\n                ...state,\n                ledgerAddresses: action.ledgerAddresses,\n            };\n        default:\n            return initialState;\n    }\n};\n\nexport {\n    reducer\n}\n","import storage from 'redux-persist/lib/storage';\nimport {reducer} from './reducers';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from \"redux-thunk\";\nconst persistConfig = {\n    key: 'root',\n    blacklist: ['error','errorMessage'],\n    storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\nconst store = createStore(persistedReducer, applyMiddleware(thunk));\nconst persistor = persistStore(store);\n\nexport {\n    store,\n    persistor\n}\n","import {reducer} from \"./reducers\";\nimport {vote, getAccounts, lockCelo, registerAccount, setLedgerAddresses, updateBalances, activateVote, delegateVoting} from \"./actions\";\nimport {store, persistor } from \"./store\";\nimport {Account, DelegateVote} from \"../models\";\nimport BigNumber from \"bignumber.js\";\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        getAccounts: (ledgerAddresses: number = 1) => dispatch(getAccounts(ledgerAddresses)),\n        setLedgerAddresses: (ledgerAddresses: number) => dispatch(setLedgerAddresses(ledgerAddresses)),\n        updateBalances: () => dispatch(updateBalances()),\n        lockCelo: (account: Account, amount: BigNumber) => dispatch(lockCelo(account, amount)),\n        registerAccount: (account: Account) => dispatch(registerAccount(account)),\n        vote: (account: Account, value: BigNumber) => dispatch(vote(account, value)),\n        activateVote: (account: Account) => dispatch(activateVote(account)),\n        delegateVoting: (item: DelegateVote) => dispatch(delegateVoting(item)),\n    };\n};\n\nconst mapStateToProps = (state: any, props: any) => {\n    return {\n        ...props,\n        ...state,\n    }\n};\n\nexport {\n    store,\n    persistor,\n    reducer,\n    mapStateToProps,\n    mapDispatchToProps\n}\n","import React from \"react\";\nimport {Button, InputAdornment, Modal, TextField} from \"@material-ui/core\";\nimport \"../App.scss\";\nimport {Account } from '../models';\nimport {connect} from \"react-redux\";\nimport {mapDispatchToProps, mapStateToProps} from \"../store\";\nimport BigNumber from \"bignumber.js\";\n\ninterface LockCeloModalProps {\n    open: boolean;\n    handelClose: () => void;\n    account?: Account;\n    lockCelo: (account: Account, amount: BigNumber) => void;\n}\n\nclass LockCeloModal extends React.Component<LockCeloModalProps, any> {\n    state = {\n        lockAmount: 0,\n    };\n\n    updateCeloAmount = (event: any) => {\n        console.log(event.target.value);\n        this.setState({\n            ...this.state,\n            lockAmount: event.target.value\n        })\n    };\n\n    lockCelo = () => {\n        const { lockAmount } = this.state;\n        const { account } = this.props;\n\n        if (lockAmount <= 0) {\n            return alert(\"Lock Amount must be greater than zero\");\n        }\n        const amount = new BigNumber(lockAmount.toString() + \"e18\");\n        this.props.lockCelo(account!, amount);\n    };\n\n    render() {\n        const { open, handelClose, account } = this.props;\n        if (!open) return (<div/>);\n        if (!account) {\n            return (\n                <div>Account has not been set. Please try again.</div>\n            )\n        }\n        const { lockAmount } = this.state;\n\n        return (\n            <div>\n                <Modal open={open} onClose={handelClose} >\n                    <div className=\"modal\" >\n                        <h2>Lock Celo</h2>\n                        <p>Select the amount below that you want to lock</p>\n                        <p>From: { account.address }</p>\n                        <TextField type=\"number\"\n                                   value={lockAmount}\n                                   onChange={this.updateCeloAmount}\n                                   size=\"small\"\n                                   id=\"ledgerAddresses\"\n                                   label=\"Lock Amount\"\n                                   variant=\"outlined\"\n                                   InputProps={{\n                                       startAdornment: (\n                                           <InputAdornment position=\"end\">\n                                               Celo:\n                                           </InputAdornment>\n                                       )\n                                   }}\n                        />\n                        <Button color=\"primary\" variant=\"contained\" onClick={this.lockCelo}>Lock Celo</Button>\n                    </div>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LockCeloModal);\n","import React from \"react\";\nimport {Button, InputAdornment, Modal, TextField} from \"@material-ui/core\";\nimport \"../App.scss\";\nimport {Account } from '../models';\nimport {connect} from \"react-redux\";\nimport {mapDispatchToProps, mapStateToProps} from \"../store\";\nimport BigNumber from \"bignumber.js\";\n\ninterface VoteModalProps {\n    open: boolean;\n    handelClose: () => void;\n    account?: Account;\n    vote: (account: Account, amount: BigNumber) => void;\n}\n\nclass VoteModal extends React.Component<VoteModalProps, any> {\n    state = {\n        voteAmount: 0,\n    };\n\n    updateVoteAmount = (event: any) => {\n        this.setState({\n            ...this.state,\n            voteAmount: event.target.value\n        })\n    };\n\n    vote = () => {\n        const { voteAmount } = this.state;\n        const { account } = this.props;\n\n        if (voteAmount <= 0) {\n            return alert(\"Vote Amount must be greater than zero\");\n        }\n        const amount = new BigNumber(voteAmount.toString() + \"e18\");\n        this.props.vote(account!, amount);\n    };\n\n    render() {\n        const { open, handelClose, account } = this.props;\n        if (!open) return (<div/>);\n        if (!account) {\n            return (\n                <div>Account has not been set. Please try again.</div>\n            )\n        }\n\n        const { voteAmount } = this.state;\n        return (\n            <div>\n                <Modal open={open} onClose={handelClose} >\n                    <div className=\"modal\" >\n                        <h2>Vote for Us!!</h2>\n                        <p>Select the amount below that you want to Vote for us</p>\n                        <p>From: { account.address }</p>\n                        <TextField type=\"number\"\n                                   value={voteAmount}\n                                   onChange={this.updateVoteAmount}\n                                   size=\"small\"\n                                   id=\"ledgerAddresses\"\n                                   label=\"Vote Amount\"\n                                   variant=\"outlined\"\n                                   InputProps={{\n                                       startAdornment: (\n                                           <InputAdornment position=\"end\">\n                                               Celo:\n                                           </InputAdornment>\n                                       )\n                                   }}\n                        />\n                        <Button color=\"primary\" variant=\"contained\" onClick={this.vote}>Vote</Button>\n                    </div>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(VoteModal);\n","import React from \"react\";\nimport {Button, Modal} from \"@material-ui/core\";\nimport \"../App.scss\";\nimport {Account } from '../models';\n\ninterface DelegateModalProps {\n    open: boolean;\n    handelClose: () => void;\n    account?: Account;\n    delegate: (account: Account) => void;\n}\n\nclass DelegateModal extends React.Component<DelegateModalProps, any> {\n    state = {\n        voteAmount: 0,\n    };\n\n    updateVoteAmount = (event: any) => {\n        this.setState({\n            ...this.state,\n            voteAmount: event.target.value\n        })\n    };\n\n    render() {\n        const { delegate, open, handelClose, account } = this.props;\n        if (!open) return (<div/>);\n        if (!account) {\n            return (\n                <div>Account has not been set. Please try again.</div>\n            )\n        }\n\n        return (\n            <div>\n                <Modal open={open} onClose={handelClose} >\n                    <div className=\"modal\" >\n                        <h2>Delegate Voting to Celo.Works</h2>\n                        <p>By clicking below, you confirm you are authorizing Celo.Works to vote on your behalf.</p>\n                        <Button color=\"primary\" variant=\"text\" onClick={handelClose}>Cancel</Button>\n                        <Button color=\"primary\" variant=\"contained\" onClick={() => delegate(account)}>Vote</Button>\n                    </div>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nexport default DelegateModal;\n","import React from \"react\";\nimport {Account} from \"../models\";\nimport {Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\nimport Crypto from \"./Crypto\";\nimport Address from \"./Address\";\nimport LockCeloModal from \"./LockCeloModal\";\nimport {connect} from \"react-redux\";\nimport {mapDispatchToProps, mapStateToProps} from \"../store\";\nimport VoteModal from \"./VoteModal\";\nimport DelegateModal from \"./DelegateModal\";\n\ninterface AccountsTableProps {\n    accounts: Account[];\n    registerAccount: (account: Account) => void;\n    activateVote: (account: Account) => void;\n    delegateVoting: (from: Account, signer: Account, signature: string) => void;\n}\n\nclass AccountsTable extends React.Component<AccountsTableProps> {\n    state = {\n        openModal: false,\n        openVoteModal: false,\n        openDelegateModal: false,\n        modalAccount: undefined,\n        modalVoteAccount: undefined,\n        modalDelegateAccount: undefined,\n    };\n\n    closeModal = () => {\n        this.setState({\n            openModal: false,\n            openVoteModal: false,\n            modalDelegateAccount: false\n        })\n    };\n\n    lockCelo(account: Account) {\n        this.setState({\n            ...this.state,\n            modalAccount: account,\n            openModal: true\n        });\n    }\n\n    openVoteModal(account: Account) {\n        this.setState({\n            ...this.state,\n            modalVoteAccount: account,\n            openVoteModal: true\n        })\n    }\n\n    openDelegateModal(account: Account) {\n        this.setState({\n            ...this.state,\n            modalDelegateAccount: account,\n            openDelegateModal: true\n        })\n    }\n\n    activateVotes(account: Account) {\n        this.props.activateVote(account);\n    }\n\n    delegate = (account: Account) => {\n        const { delegateVoting } = this.props;\n        const signature = \"0x1b0f10b0c05a98f49d9cf5e54fac00b9548e7823de6ba89342d5e23ffab9a44d4d25fd557b0850ac4fc9e8634ec6a24a01f0f361641674bf6c36b5717845437e3d\";\n        const from = account;\n        const signer = new Account({address: \"0x77f1c96eCdd5222143b25d8a2E608CAAc3Ed2604\"});\n        this.closeModal();\n        delegateVoting(from, signer, signature);\n    };\n\n    getRows = (data: Account[]) => {\n        if (!data) return undefined;\n        const { registerAccount } = this.props;\n\n        return data.map((x: Account, index: number) => {\n            x = new Account(x);\n\n            return (\n                <TableRow key={index}>\n                    <TableCell>\n                        <Address address={x.address} />\n                    </TableCell>\n                    <TableCell align=\"right\">\n                        <Crypto value={x.lockedCelo.total} />\n                    </TableCell>\n                    <TableCell align=\"right\">\n                        <Crypto value={x.lockedCelo.nonvoting} />\n                    </TableCell>\n                    <TableCell align=\"right\">\n                        <Crypto value={x.celo} />\n                    </TableCell>\n                    <TableCell>\n                        <Button size=\"small\" color=\"primary\" onClick={() => this.openVoteModal(x)} variant=\"contained\" disabled={ !x.isAccount || x.lockedCelo.nonvoting.lte(0) }>Vote</Button>\n                        <Button size=\"small\" color=\"primary\" onClick={() => this.activateVotes(x)} variant=\"contained\" disabled={ !x.hasPendingVotes }>Activate Votes</Button>\n                        <Button size=\"small\" color=\"primary\" onClick={() => this.openDelegateModal(x)} variant=\"contained\" >Delegate Voting</Button>\n                    </TableCell>\n                    <TableCell>\n                        { x.isAccount ?  <Button size=\"small\" variant=\"contained\" onClick={() => this.lockCelo(x)} disabled={ !x.isAccount } >Lock Celo</Button> : \"\"}\n                        { !x.isAccount ? <Button size=\"small\" variant=\"contained\" onClick={() => registerAccount(x)} disabled={ x.isAccount } >Register Account</Button> : \"\"}\n                    </TableCell>\n                </TableRow>\n            )\n        });\n    };\n\n    render() {\n        const { accounts } = this.props;\n\n        const rows = this.getRows(accounts);\n        return (\n            <div>\n                <TableContainer component={Paper}>\n                    <Table aria-label=\"Account Table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Address</TableCell>\n                                <TableCell align=\"right\">Locked Celo</TableCell>\n                                <TableCell align=\"right\">Non-voting</TableCell>\n                                <TableCell align=\"right\">Celo</TableCell>\n                                <TableCell>Vote</TableCell>\n                                <TableCell />\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <LockCeloModal open={this.state.openModal} account={this.state.modalAccount} handelClose={this.closeModal} />\n                <VoteModal open={this.state.openVoteModal} account={this.state.modalVoteAccount} handelClose={this.closeModal} />\n                <DelegateModal open={this.state.openDelegateModal} handelClose={this.closeModal} account={this.state.modalDelegateAccount} delegate={this.delegate} />\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccountsTable);\n","import React from 'react';\nimport './App.scss';\nimport {AccountsTable} from \"./components\";\nimport {Button, TextField, Card, CardContent} from \"@material-ui/core\";\nimport {Account} from \"./models\";\nimport {connect} from \"react-redux\";\nimport {mapDispatchToProps, mapStateToProps} from \"./store\";\n\ninterface DashboardProps {\n    updateBalances: () => void;\n    getAccounts: (ledgerAddresses: number) => void;\n    setLedgerAddresses: (ledgerAddresses: number) => void;\n    accounts: Account[];\n    errorMessage: string;\n    loading: boolean;\n    ledgerAddresses: number;\n    lockCelo: (account: Account) => void;\n}\n\nclass Dashboard extends React.Component<DashboardProps, any> {\n    state = {\n        ledgerAddresses: 1\n    };\n\n    getLedgerCeloAddress = async () => {\n        this.props.getAccounts(this.props.ledgerAddresses);\n    };\n\n    updateState = (event: any) => {\n        this.props.setLedgerAddresses( event.target.value);\n    };\n\n    render() {\n        const { updateBalances, accounts, errorMessage, ledgerAddresses } = this.props;\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>DEMO: LIVE WORKING VERSION!</h1>\n                    <p>\n                        Vote for us!  Only use Under Instruction!! Hello. Coming Soon == ONLY FOR YOU ALESH!!!! 55555\n                    </p>\n                    <p>\n                        <a href=\"https://celo.org/developers/faucet\" target=\"_blank\" rel=\"noopener noreferrer\">Click here to load test Celo</a>\n                    </p>\n                    <Card>\n                        <CardContent>\n                            <TextField type=\"number\" value={ledgerAddresses} onChange={this.updateState} size=\"small\" id=\"ledgerAddresses\" label=\"Ledger Addresses\" variant=\"outlined\" />\n                            <Button  variant=\"contained\" color=\"primary\" onClick={this.getLedgerCeloAddress}>\n                                Load from Ledger\n                            </Button>\n                            <Button  variant=\"contained\" color=\"default\" onClick={updateBalances}>\n                                Update Balances\n                            </Button>\n                            <div>\n                                <AccountsTable accounts={accounts}  />\n                            </div>\n                            <span>{ errorMessage }</span>\n\n                            <p>Make sure your ledger device is unlocked and the Celo app open</p>\n                        </CardContent>\n                    </Card>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n","import React from 'react';\nimport './App.scss';\nimport {Button, Card, CardActions, CardContent, Container, Typography} from \"@material-ui/core\";\nimport {Account, DelegateVote} from \"./models\";\nimport {connect} from \"react-redux\";\nimport {mapDispatchToProps, mapStateToProps} from \"./store\";\nimport Address from \"./components/Address\";\nimport {Alert, AlertTitle} from \"@material-ui/lab\";\n\ninterface NicProps {\n    updateBalances: () => void;\n    getAccounts: (ledgerAddresses: number) => void;\n    setLedgerAddresses: (ledgerAddresses: number) => void;\n    accounts: Account[];\n    errorMessage: string;\n    error: boolean;\n    loading: boolean;\n    ledgerAddresses: number;\n    lockCelo: (account: Account) => void;\n    delegateVoting: (item: DelegateVote) => void;\n}\n\nclass Nic extends React.Component<NicProps, any> {\n    state = {\n        ledgerAddresses: 1,\n        accounts: [\n            { contract: \"0x368F77aC7C739415F86E22CE413cd72bCEC9Fb13\",\tbeneficiary: \"0x297dCFCf65545B14927fc21c1A6d56FFD5A19FE1\",\tsigner: \"0xB7862b0fB5851f054CCbf9dDa2c012cdE5ddeBb9\", signature: \"0x1b06ee45344a45bc57e779c009f80aa208de48e0f92262ae9aa9120455f15e228207e65285bd52bfd26eaae9f80ac76cd3c49f5d7c3c8c67aedbff4d63834e2a5c\"},\n            { contract: \"0x2B96EbF0a05ba19Be50686F3FB3Cc18aB7a1f679\",\tbeneficiary: \"0x0F85a8158dA53d934062889cE63342f0bF9CD5F9\",\tsigner: \"0x1615ECE67468FA44B7940256f6aC90192C4668e3\", signature: \"0x1b845ea5481074b3c6cb063eea9574a30a2219f5acf1bda0d9535a0b542f3c01cc7e6a16f14ca7b372188ebd91dae723bf0af3617f90a01015d994dcbcba089704\"},\n            { contract: \"0x1f90ecEE7dC0Cf02cf3e84e623012a92937b0c46\",\tbeneficiary: \"0x7a09E56aF0e9C0631D84Ff44E8630b530dCacAe9\",\tsigner: \"0x9541217aDdB04Ee396656745D67dcc99B75f8A71\", signature: \"0x1c8379543476976c36c95727ae4f9f19276ff1e6858aa3adccf0ce03278ba45ce47543fd23a64fa720abe8d83740458d0a27a81b5468ec70d01a2aff9e76792403\"},\n            { contract: \"0xe834a527aadfbDeA467db68cba356e2d72a9dE1d\",\tbeneficiary: \"0x6Fb5d1792f248797FE9bD7b92948454593845e03\",\tsigner: \"0x1931AEFDcd2dF78Bae27e9aE3607130114202234\", signature: \"0x1c1129337cec1f556ef2ef996556479889b3393d0bc65e6ad7812968acd767aa503f34f548b86d1d9237377589bb4014055ea2b29eb32f68d8f14180c257d17f85\"},\n        ]\n    };\n\n    getLedgerCeloAddress = async () => {\n        this.props.getAccounts(this.props.ledgerAddresses);\n    };\n\n    updateState = (event: any) => {\n        this.props.setLedgerAddresses( event.target.value);\n    };\n\n    delegateVoting = (item: DelegateVote) => {\n        this.props.delegateVoting(item);\n    };\n\n    accounts = (accounts: any = []) => {\n        return accounts.map((x: DelegateVote) => {\n            return (\n                <Card className=\"card\" key={x.contract}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Release Gold Contract: <Address address={x.contract}/>\n                        </Typography>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            Beneficiary: <br/><Address address={x.beneficiary}/>\n                        </Typography>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                            New Voter: <br/><Address address={x.signer}/>\n                        </Typography>\n                    </CardContent>\n                    <CardActions>\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => this.delegateVoting(x)}>Delegate\n                            Voting</Button>\n                    </CardActions>\n                </Card>\n            )\n        });\n    };\n\n    render() {\n        const { error, errorMessage } = this.props;\n        const { accounts } = this.state;\n        let alert = undefined;\n        if (error) {\n            alert = (<Alert severity=\"error\">\n                <AlertTitle>Error</AlertTitle>\n                {errorMessage}\n            </Alert>)\n        }\n\n        return (\n            <Container maxWidth=\"sm\">\n                {alert}\n                {this.accounts(accounts)}\n            </Container>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Nic);\n","import React from 'react';\nimport './App.scss';\nimport {CircularProgress} from \"@material-ui/core\";\nimport {Account} from \"./models\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Dashboard from \"./Dashboard\";\nimport {connect} from \"react-redux\";\nimport {mapDispatchToProps, mapStateToProps} from \"./store\";\nimport Nic from \"./Nic\";\n\ninterface AppProps {\n    updateBalances: () => void;\n    getAccounts: (ledgerAddresses: number) => void;\n    setLedgerAddresses: (ledgerAddresses: number) => void;\n    accounts: Account[];\n    errorMessage: string;\n    loading: boolean;\n    ledgerAddresses: number;\n    lockCelo: (account: Account) => void;\n}\n\nclass App extends React.Component<AppProps, any> {\n    loadingIcon = () => {\n        return (\n            <div className=\"loading-icon-container\">\n                <div className=\"background\"></div>\n                <CircularProgress className=\"loading-icon\" />\n            </div>\n        );\n    };\n\n    render() {\n        const { loading } = this.props;\n\n        return (\n            <div className=\"App\">\n                <Router>\n                    <Switch>\n                        <Route path=\"/nic\">\n                            <Nic />\n                        </Route>\n                        <Route path=\"/\">\n                            <Dashboard />\n                        </Route>\n\n                    </Switch>\n                </Router>\n                { loading ? this.loadingIcon() : undefined }\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n//export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {persistor, store} from \"./store\";\nimport { PersistGate } from 'redux-persist/integration/react';\nimport {Box} from \"@material-ui/core\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <Box>\n                <App />\n            </Box>\n        </PersistGate>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}